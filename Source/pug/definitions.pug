-
  // Javascript definitions needed later.
  function range (start, end) {
    if (start < 0) throw TypeError("Not supported.");
    return [...Array(end+1).keys()].slice(start);
  }
  function TitleCase(str) {
    return `${str[0].toUpperCase()}${str.substring(1)}`;
  }
  const zerodiceFormula = "?{@{bonusdice}|0,{{die1=[[d6]]&#125;&#125;|1,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#125;&#125;|2,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#125;&#125;|3,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#125;&#125;|4,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#44;&#125;&#125; {{die5=[[d6]]&#125;&#125;|5,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#44;&#125;&#125; {{die5=[[d6]]&#44;&#125;&#125; {{die6=[[d6]]&#125;&#125;|6,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#44;&#125;&#125; {{die5=[[d6]]&#44;&#125;&#125; {{die6=[[d6]]&#44;&#125;&#125; {{die7=[[d6]]&#125;&#125;|-1,{{zerodie1=[[d6]]&#44;&#125;&#125; {{zerodie2=[[d6]]&#125;&#125;|-2,{{zerodie1=[[d6]]&#44;&#125;&#125; {{zerodie2=[[d6]]&#125;&#125;|-3,{{zerodie1=[[d6]]&#44;&#125;&#125; {{zerodie2=[[d6]]&#125;&#125;}";
  const oneDieFormula = "?{@{bonusdice}|0,{{die1=[[d6]]&#125;&#125;|1,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#125;&#125;|2,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#125;&#125;|3,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#125;&#125;|4,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#44;&#125;&#125; {{die5=[[d6]]&#125;&#125;|5,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#44;&#125;&#125; {{die5=[[d6]]&#44;&#125;&#125; {{die6=[[d6]]&#125;&#125;|6,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#44;&#125;&#125; {{die5=[[d6]]&#44;&#125;&#125; {{die6=[[d6]]&#44;&#125;&#125; {{die7=[[d6]]&#125;&#125;|-1,{{zerodie1=[[d6]]&#44;&#125;&#125; {{zerodie2=[[d6]]&#125;&#125;|-2,{{zerodie1=[[d6]]&#44;&#125;&#125; {{zerodie2=[[d6]]&#125;&#125;|-3,{{zerodie1=[[d6]]&#44;&#125;&#125; {{zerodie2=[[d6]]&#125;&#125;}";
  const twoDiceFormula = "?{@{bonusdice}|0,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#125;&#125;|1,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#125;&#125;|2,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#125;&#125;|3,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#44;&#125;&#125; {{die5=[[d6]]&#125;&#125;|4,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#44;&#125;&#125; {{die5=[[d6]]&#44;&#125;&#125; {{die6=[[d6]]&#125;&#125;|5,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#44;&#125;&#125; {{die5=[[d6]]&#44;&#125;&#125; {{die6=[[d6]]&#44;&#125;&#125; {{die7=[[d6]]&#125;&#125;|6,{{die1=[[d6]]&#44;&#125;&#125; {{die2=[[d6]]&#44;&#125;&#125; {{die3=[[d6]]&#44;&#125;&#125; {{die4=[[d6]]&#44;&#125;&#125; {{die5=[[d6]]&#44;&#125;&#125; {{die6=[[d6]]&#44;&#125;&#125; {{die7=[[d6]]&#44;&#125;&#125; {{die8=[[d6]]&#125;&#125;|-1,{{die1=[[d6]]&#125;&#125;|-2,{{zerodie1=[[d6]]&#44;&#125;&#125; {{zerodie2=[[d6]]&#125;&#125;|-3,{{zerodie1=[[d6]]&#44;&#125;&#125; {{zerodie2=[[d6]]&#125;&#125;}";
  const actionData = {
    insight: ["research", "scout", "rig"],
    prowess: ["wreck", "skirmish", "shoot", "maneuver"],
    resolve: ["consort", "discipline", "marshal", "sway"]
  };
  const traumaData = ["cold", "haunted", "obsessed", "paranoid", "reckless", "soft", "unstable", "vicious"];
  const blightData = ["anathema", "host", "hunger", "miasma", "mutation", "rage", "rot", "visions"];
  const specialistActions = ["aim", "anchor", "channels", "doctor", "grit", "scrounge", "weave"];
  const playbooks = ["heavy", "medic", "officer", "scout", "sniper", "soldier", "rookie"];
  const legionRoles = {
    required: ["commander", "marshal", "quartermaster"],
    optional: ["lorekeeper", "spymaster"],
  }
  const divines = {
    chosen: ["shreya", "horned_one", "zora"],
    broken: ["blighter", "breaker", "render"]
  }
  const heritageData = {
    "bartan": ["warm", "pious", "stoic", "educated"],
    "panyar": ["artisan", "traveler", "shrewd", "marked"],
    "orite": ["noble", "connected", "vengeful", "stern"],
    "zemyati": ["tough", "bold", "loyal", "stubborn"]
  };

  const alchemicals = ["owlsight_oil", "chembalm", "deep", "rage_venom"];

mixin checkbox(name)
  input(
    type="checkbox",
    class=["checkbox", attributes.class],
    name=`attr_${name}`,
    value=attributes.value||"1",
    checked=attributes.checked
  )
  span

mixin text-button(name)
  label(class=["text-button", attributes.class])
    input(type="checkbox", name=`attr_${name}`, value=1)
    span(data-i18n!=attributes["data-i18n"])

mixin radio(name)
  input(type="radio", class!=attributes.class, name=`attr_${name}`, value!=attributes.value, checked=attributes.checked)
  span(data-i18n!=attributes["data-i18n"])
    block

mixin text-input(name)
  input(type="text", spellcheck="false", name=`attr_${name}`)&attributes(attributes)

mixin number-input(name)
  input(type="number", name=`attr_${name}`)&attributes(attributes)

mixin textarea(name)
  textarea(spellcheck="false", name=`attr_${name}`)&attributes(attributes)
    block

mixin hidden-input(name)
  input(type="hidden", name=`attr_${name}`)&attributes(attributes)

mixin hidden-checkbox(name)
  - classes = attributes.class;
  - delete attributes.class;
  input(type="checkbox", name=`attr_${name}`, class=["hidden", classes])&attributes(attributes)

mixin autoexpand(name)
  div(class=["auto-expand", attributes.class])
    span(name=`attr_${name}`)
      block
    +textarea(name)(data-i18n-placeholder!=attributes["data-i18n-placeholder"])
      block

mixin roll(name, templatedata)
  button(
    type="roll",
    name=`roll_${name}`,
    value!=`&{template:blades} {{charname=@{character_name}}} ${templatedata} {{charimage=@{chat_image}}}`
  )&attributes(attributes)
    block

mixin fortuneroll(name, templatedata, useNotes)
  button(
    type="roll",
    name=`roll_${name}`,
    value!=`&{template:blades} {{charname=@{character_name}}} ${templatedata} @{numberofdice}` +
      `${useNotes ? " {{notes=@{notes_query}}}" : ""} {{charimage=@{chat_image}}}`
  )&attributes(attributes)

mixin specialability()
  .specialability
    button.broadcast-button(
      type="roll",
      name=`roll_Show`,
      value="&{template:blades-broadcast} {{charname=@{character_name}}} {{type=^{special_ability}}} {{title=@{name}}} {{content=@{description}}} {{charimage=@{chat_image}}}",
      data-i18n-title="send_details_to_chat"
    ) :
    +checkbox("check").diamondbox
    +autoexpand("name")(data-i18n-placeholder="ability_name").name.smallcaps
    +autoexpand("description")(data-i18n-placeholder="ability_description").desc

mixin commander-props(base, num, props)
  .title
    span(data-i18n=base).space-after
    != ` (${num}):`
  each prop in props
    label.prop
      +checkbox(`commander_${base}_${prop}`).diamondbox.small
      span(data-i18n=prop)

mixin make_variable_clock()
  +hidden-input("clock_size")(value="").size
  +autoexpand("clock_name")(data-i18n-placeholder="clock_name").smallcaps
  button.broadcast-button(
    type="roll",
    name="roll_Show",
    value="&{template:blades-broadcast}{{charname=@{character_name}}} {{title=@{clock_name}}} {{clock=1}} {{clocksize=@{clock_size}}} {{clockprogress=@{clock_progress}}} {{charimage=@{chat_image}}}",
    data-i18n-title="send_details_to_chat") :
  .size-choice
    each num in [4,6,8,10]
      label.text-button
        +radio("clock_size")(value=num)=num
  .clock-container
    +radio("clock_progress")(value="0", checked).zero.input-progress.all
    input.input-progress.all(type="radio", name="attr_clock_progress", value="1")
    input.input-progress.all(type="radio", name="attr_clock_progress", value="2")
    input.input-progress.all(type="radio", name="attr_clock_progress", value="3")
    input.input-progress.all(type="radio", name="attr_clock_progress", value="4")
    input.input-progress.sheet-6clock.sheet-8clock.sheet-10clock(type="radio", name="attr_clock_progress", value="5")
    input.input-progress.sheet-6clock.sheet-8clock.sheet-10clock(type="radio", name="attr_clock_progress", value="6")
    input.input-progress.sheet-8clock.sheet-10clock(type="radio", name="attr_clock_progress", value="7")
    input.input-progress.sheet-8clock.sheet-10clock(type="radio", name="attr_clock_progress", value="8")
    input.input-progress.sheet-10clock(type="radio", name="attr_clock_progress", value="9")
    input.input-progress.sheet-10clock(type="radio", name="attr_clock_progress", value="10")
    .clock

mixin favor-clock(attrName)
  .flag-4clock
    .label(data-i18n="mission_favor")
    +radio(attrName)(value="0", checked).zero.input-progress
    each num in range(1,4)
      input.input-progress(type="radio", name=`attr_${attrName}`, value=num)
    .clock

//- size must be in {6,8,10}
mixin free-clock(size, attrName)
  div(class=["clock-container", `size-${size}`, attributes.class])
    +radio(attrName)(value="0", checked).zero.input-progress
    each num in range(1,size)
      input.input-progress(type="radio", name=`attr_${attrName}`, value=num)
    .clock

mixin flag-xp-clock(attrName)
  .flag-8clock
    +radio(attrName)(value="0", checked).zero.input-progress
    each num in range(1,8)
      input.input-progress(type="radio", name=`attr_${attrName}`, value=num)
    .clock

//- Items
-
  class Item {
    constructor(options = {}) {
      this.extraText = String(options.extraText || "");
      this.isFine = Boolean(options.isFine || false);
      this._index = -1;
      this._prefix = "PREFIX_NOT_SET";
    }
    get hasExtraText() {
      return this.extraText.length > 0;
    }
    key() {
      return [
        this.itemBaseType,
        this.isFine,
        this.boxes || 0,
        this.uses || 0,
        this.diamond || false,
        this.hasExtraText,
      ].join("|");
    }
    humanReadablePrefix() {
      const markers = [this.itemBaseType];
      if (this.isFine) markers.push("fine");
      if (this.boxes) markers.push(`${this.boxes}box`);
      if (this.uses) markers.push(`${this.uses}uses`);
      if (this.diamond) markers.push("dia");
      if (this.hasExtraText) markers.push("desc");
      markers.push(this.index);
      return markers.join("_");
    }
    // Human-readable description of this item's base type.
    get itemBaseType() {
      throw new TypeError("Abstract class Item cannot be instantiated.");
    }
    get index() {
      return this._index;
    }
    set index(index) {
      this._index = index;
    }
    get prefix() {
      return this._prefix;
    }
    set prefix(prefix) {
      this._prefix = prefix;
    }
  }

  class SingleItem extends Item {
    constructor(options = {}) {
      super(options);
      if (options.hasOwnProperty("name")) this.name = String(options.name);
      this.boxes = parseInt(options.boxes) || 0;
      this.uses = parseInt(options.uses) || 0;
      this.diamond = Boolean(options.diamond || false);
    }
    get itemBaseType() {
      return "si";
    }
  }

  class DoubleItem extends Item {
    constructor(options = {}) {
      super(options);
      const subOptions = {
        isFine: this.isFine,
        boxes: 1,
      };
      const firstOptions = Object.assign({ name: options.firstName }, subOptions);
      const secondOptions = Object.assign(
        { name: options.secondName },
        subOptions
      );
      this._firstItem = new SingleItem(firstOptions);
      this._secondItem = new SingleItem(secondOptions);
    }
    get firstItem() {
      return this._firstItem;
    }
    get secondItem() {
      return this._secondItem;
    }
    get itemBaseType() {
      return "do";
    }
    set index(index) {
      this.firstItem.index = index;
      this.secondItem.index = index;
      this._index = index;
    }
    set prefix(prefix) {
      this.firstItem.prefix = prefix;
      this.secondItem.prefix = prefix;
      this._prefix = prefix;
    }
    get index() {
      return this._index;
    }
    get prefix() {
      return this._prefix;
    }
  }

  class ItemCreator {
    constructor(type) {
      this._counts = {};
      this._type = type;
    }
    counts() {
      return Object.assign({}, this._counts);
    }
    _count(item) {
      return this._counts[item.key()] || 0;
    }
    _getIndexForNewItem(item) {
      const index = this._count(item);
      this._counts[item.key()] = index + 1;
      return index;
    }
    _getPrefixForItem(item) {
      return `item_${this._type}_${item.humanReadablePrefix()}`;
    }
    Create(options = {}) {
      const itemType = options.double ? DoubleItem : SingleItem;
      const newItem = new itemType(options);
      newItem.index = this._getIndexForNewItem(newItem);
      newItem.prefix = this._getPrefixForItem(newItem);
      return newItem;
    }
  }

  const lightItems = new ItemCreator("light");
  const normalItems = new ItemCreator("normal");
  const heavyItems = new ItemCreator("heavy");

  const allItems = {
      light: [
      lightItems.Create({ isFine: true }),
      lightItems.Create({ isFine: true }),
      lightItems.Create({ double: true, isFine: true }),
      lightItems.Create({ isFine: true, uses: 3 }),
      lightItems.Create({ isFine: true, extraText: true }),
      lightItems.Create({ isFine: true, boxes: 1 }),
      lightItems.Create(),
      lightItems.Create(),
      lightItems.Create(),
      lightItems.Create(),
      lightItems.Create({ uses: 1 }),
      lightItems.Create({ uses: 3 }),
      lightItems.Create({ uses: 4 }),
      lightItems.Create({ uses: 5 }),
      lightItems.Create({ boxes: 1 }),
    ],
    normal: [
      normalItems.Create({ isFine: true }),
      normalItems.Create({ double: true, isFine: true }),
      normalItems.Create({ isFine: true, extraText: true }),
      normalItems.Create({ isFine: true, uses: 3 }),
      normalItems.Create(),
      normalItems.Create({ double: true }),
      normalItems.Create({ extraText: true }),
      normalItems.Create({ boxes: 1 }),
      normalItems.Create({ uses: 1 }),
      normalItems.Create({ uses: 3 }),
      normalItems.Create({ uses: 5 }),
    ],
    heavy: [
      heavyItems.Create({ isFine: true }),
      heavyItems.Create({ isFine: true, extraText: true }),
      heavyItems.Create({ double: true, isFine: true }),
      heavyItems.Create({ double: true, isFine: true, extraText: true }),
      heavyItems.Create(),
      heavyItems.Create(),
      heavyItems.Create({ uses: 1 }),
      heavyItems.Create({ uses: 1 }),
    ],
  };

mixin item(item, showHider = true)
  if (showHider)
    +hidden-input(`${item.prefix}_show`)(value="0").hider
  div
    if (item.itemBaseType == "si")
      +single-item(item)
    else
      +double-item(item)
    if (item.hasExtraText)
      .extra
        +autoexpand(`${item.prefix}_extra`)(data-i18n-placeholder="additional_info")

mixin single-item(item, isSecond = false)
  - value = isSecond ? "2" : "1";
  li(class=["item", item.boxes > 0 ? "nodot" : "", item.isFine ? "fine" : ""])
    if (item.boxes > 0)
      if (item.boxes == 1)
        +checkbox(`${item.prefix}_check`)(value=value, class= item.diamond ? "diamondbox small" : "small")
      else
        +hidden-checkbox(`${item.prefix}_check`)(value="0", checked).fakeradio
        each num in range(1, item.boxes)
          if (num > 1)
            .floatingbar
          +checkbox(`${item.prefix}_check`)(value= num + value - 1).small.fakeradio
    - nameField = isSecond ? `${item.prefix}_name2`: `${item.prefix}_name`;
    +text-input(nameField)(data-i18n-placeholder="item_name").name
    if (item.uses > 0)
      .uses-box
        +hidden-checkbox(`${item.prefix}_uses`)(value="0", checked).fakeradio
        each num in range(1, item.uses)
          +checkbox(`${item.prefix}_uses`)(value=num).circlebox.small.fakeradio

mixin double-item(itemChoice)
  +single-item(itemChoice.firstItem)
  .or.smallcaps(data-i18n="or")
  +single-item(itemChoice.secondItem, true)

mixin variable-item()
  +hidden-input("num_boxes")(value="1").num-boxes
  +hidden-input("num_uses")(value="0").num-uses
  +hidden-input("diamond")(value="0").diamond
  +hidden-input("layout_chosen")(value="0").layout-chosen
  .item.nodot
    +hidden-checkbox("check")(value="0", checked).fakeradio
    +checkbox("check")(value=1).small.fakeradio.boxes
    .floatingbar
    +checkbox("check")(value=2).small.fakeradio.boxes
    +text-input("name")(data-i18n-placeholder="item_name").name
    .uses-box
      +hidden-checkbox("item_uses")(value="0", checked).fakeradio
      each num in range(1, 5)
        +checkbox("item_uses")(value=num).circlebox.small.fakeradio.uses
  .layout-chooser.flex-center
    span(data-i18n="boxes").colon-after
    +number-input("num_boxes")(value="1", min="1", max="2").num-boxes
    span(data-i18n="uses").colon-after
    +number-input("num_uses")(value="0", min="0", max="5").num-uses
    label
      +radio("layout_chosen")(value="1")
      span(data-i18n="ok")
